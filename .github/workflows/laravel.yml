name: CI
run-name: DuskTest ðŸš€
on: [push]
jobs:
 
  dusk-php:
    runs-on: ubuntu-latest
    env:
      APP_URL: "http://127.0.0.1:8000"
      DB_USERNAME: root
      DB_PASSWORD: root
      MAIL_MAILER: log
      DB_DATABASE: dusk
      DUSK_HEADLESS: true
#       TEST_VAR1: Testing 123
    steps:
      - uses: actions/checkout@v3
      - name: Prepare The Environment
        run: cp .env.example .env
      - name: Create Database
        run: |
          sudo systemctl start mysql
          mysql --user="root" --password="root" -e "CREATE DATABASE \`dusk\` character set UTF8mb4 collate utf8mb4_bin;"
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
      - name: Generate Application Key
        run: php artisan key:generate
      - name: Install npm
        run: npm install
      - name: Upgrade Chrome Driver
        run: php artisan dusk:chrome-driver --detect
      - name: Ensure the ChromeDriver binaries are executable
        run: sudo chmod -R 0755 ./vendor/laravel/dusk/bin/
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &
      - name: Check Chrome version
        run: /usr/bin/chromium-browser --version
      - name: Check Laravel version
        run: php artisan --version      
#       - name: Setup Firefox
#         uses: mozilla/setup-firefox@v1
#       - name: Install Firefox driver
#         run: |
#           composer require --dev derekmd/laravel-dusk-firefox
#           expect -c '
#             set timeout 10
#             spawn php artisan dusk:install-firefox --with-chrome
#             expect "Overwrite file /home/runner/work/DuskTest/DuskTest/tests/DuskTestCase.php? (yes/no) [no]:"
#             send "y"
#             expect eof
#           '
      - name: Install breeze
        run: composer require laravel/breeze --dev
      - name: Install blade
        run: |
          php artisan breeze:install blade
      - name: DB Migrate
        run: php artisan migrate
      - name: Clear cache
        run: php artisan config:clear
      - name: Run Laravel Server
        run: php artisan serve --no-reload &

#       - name: PHPUnit tests
#         uses: php-actions/phpunit@v3
#         env:
#           XDEBUG_MODE: coverage
#         with:
#           bootstrap: vendor/autoload.php
#           configuration: phpunit.xml
#           php_extensions: xdebug
#           args: tests --coverage-clover ./coverage.xml
         
#         with:
# #           configuration: "custom/path/to/phpunit.xml"
#           memory_limit: "1G"
        
#       - name: PHPUnit tests
#         uses: php-actions/phpunit@v3
#         with:
#           php_extensions: "xdebug"
#           coverage_clover: "coverage/clover.xml"
        
#       - name: PHPUnit
#         run: ./vendor/bin/phpunit --do-not-cache-result --testdox-html phpunit.html --filter=LoginTest tests
# #       - uses: php-actions/composer@v6 # or alternative dependency management
#       - name: Upload PHPUnit results
#         uses: actions/upload-artifact@v3
#         with:
#           name: phpunit
#           path: ./tests/Browser/phpunit
      - name: PHPStan
#         uses: php-actions/phpstan@v2
#       - name: Run PHPStan
#         run: ./vendor/bin/phpstan analyse ./vendor
        uses: php-actions/phpstan@v1
        with:
         args: --memory-limit=1G --no-progress --error-format=checkstyle > tests/Browser/phpstan-report.xml

#          path: ./tests
#          memory_limit: 1G
#          level: 1
# #          error_format: json #raw, table, checkstyle, json, junit, prettyJson, gitlab, github, teamcity
#          args: --error-format=json
# #          generate_baseline: tests/Browser/phpstan.json
#       - name: Test env var
#         run: echo "${{ env.TEST_VAR1 }} ${{ vars.TEST_VAR }}"
      - name: Upload PHPStan results
        uses: actions/upload-artifact@v3
        with:
          name: phpstan
          path: ./tests/Browser/phpstan-report.xml
      - name: Run Dusk Tests
        run: sudo php artisan dusk:chrome --filter LoginTest 
#       - name: Check file exists
#         run: test -e ./tests/Browser/source/Src_001.txt && echo file exists || echo file not found
#       - name: Page source
#         run: cat ./tests/Browser/source/Src_001.txt

      - name: Upload Screenshots
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: tests/Browser/screenshots
      - name: Upload Console Logs
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: console
          path: tests/Browser/console
#       - name: Check PHPUnit file exists
#         run: test -e ./vendor/bin/phpunit && echo file exists || echo file not found
      - name: Clear cache
        run: php artisan cache:clear
      - name: Artisan test
        run: php artisan test
          
      # BASIC API SCAN
      - name: ZAP API Scan
        uses: zaproxy/action-api-scan@v0.1.1
        with:
          target: 'http://127.0.0.1:8000'
#           report_name: zap_api_scan
          issue_title: API Scan Report
        
      # BASIC FULL SCAN
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://127.0.0.1:8000'
#           report_name: zap_full_scan
          issue_title: Full Scan Report
        
  
  download:
    runs-on: ubuntu-latest
    needs: dusk-php
    steps:
      - name: Download screenshot
        uses: actions/download-artifact@v3
        with:
          name: screenshots
      - name: Download PHPStan
        uses: actions/download-artifact@v3
        with:
          name: phpstan     
  
#   owasp:      
#     runs-on: ubuntu-latest
#     needs: dusk-php
#     steps:
          
#   # ADVANCED FULL SCAN
#   zap_full_scan:
#     runs-on: ubuntu-latest
#     name: Scan the web application
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           ref: master
#       - name: ZAP Scan
#         uses: zaproxy/action-full-scan@v0.4.0
#         with:
#           token: ${{ secrets.OWASP_GITHUB_TOKEN }}
#           docker_name: 'owasp/zap2docker-stable'
#           target: 'https://www.zaproxy.org/'
#           rules_file_name: '.zap/rules.tsv'
#           cmd_options: '-a'
          
#   # ADVANCED API SCAN
#   zap_api_scan:
#     runs-on: ubuntu-latest
#     name: Scan the web application (API)
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           ref: master

#       - name: ZAP Scan
#         uses: zaproxy/action-api-scan@v0.1.1
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           docker_name: 'owasp/zap2docker-stable'
#           format: openapi
#           target: 'https://www.zaproxy.org/'
#           rules_file_name: '.zap/rules.tsv'
#           cmd_options: '-a'
          
#   sonarqube:
#     name: SonarQube Trigger
#     runs-on: ubuntu-latest
#     needs: download
#     steps:
#     - name: Checking out
#       uses: actions/checkout@master
#       with:
#         # Disabling shallow clone is recommended for improving relevancy of reporting
#         fetch-depth: 0
#     - name: SonarQube Scan
#       uses: kitabisa/sonarqube-action@v1.2.0
#       with:
#         host: ${{ secrets.SONARQUBE_HOST }}
#         login: ${{ secrets.SONARQUBE_TOKEN }}
